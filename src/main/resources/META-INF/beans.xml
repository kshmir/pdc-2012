<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
					    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<bean id="log4jconfig"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass" value="org.springframework.util.Log4jConfigurer" />
		<property name="targetMethod" value="initLogging" />
		<property name="arguments">
			<list>
				<value>classpath:log4j.properties</value>
			</list>
		</property>
	</bean>

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_FALLBACK" />
		<property name="searchSystemEnvironment" value="true" />
	</bean>


	<bean id="monitorObject" class="org.chinux.pdc.server.MonitorObject" lazy-init="false">
		<property name="clientDataReceiver" ref="clientDataReceiver"/>
	</bean>

	<bean id="clientDataReceiver" class="org.chinux.pdc.nio.receivers.impl.ASyncClientDataReceiver"
		lazy-init="false">
		<property name="monitorObject" ref="monitorObject"/>
	</bean>
	
	
	<bean id="monitorWorker" class="org.chinux.pdc.workers.impl.MonitorWorker" lazy-init="false">
		<property name="monitorObject" ref="monitorObject"/>
	</bean>
	
	<bean id="configurationWorker" class="org.chinux.pdc.workers.impl.ConfigurationWorker" lazy-init="false">
	</bean>
	
	<bean id="serverHandler" class="org.chinux.pdc.nio.handlers.impl.ServerHandler"
		lazy-init="false">
		<property name="eventDispatcher" ref="eventDispatcher"></property>
	</bean>

	<bean id="eventDispatcher" class="org.chinux.pdc.nio.dispatchers.MultiThreadedEventDispatcher"
		lazy-init="false">
		<constructor-arg>
			<value>${workerthreads}</value>
		</constructor-arg>
		<constructor-arg>
			<ref bean="serverHandler" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="clientDataReceiver" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="monitorObject" />
		</constructor-arg>
	</bean>
	
	<bean id="workerEventDispatcher" class="org.chinux.pdc.nio.dispatchers.SyncEventDispatcher"
		lazy-init="false">
		<constructor-arg>
			<ref bean="configurationWorker" />
		</constructor-arg>
	</bean>
	
	<bean id="monitorworkerEventDispatcher" class="org.chinux.pdc.nio.dispatchers.SyncEventDispatcher"
		lazy-init="false">
		<constructor-arg>
			<ref bean="monitorWorker" />
		</constructor-arg>
	</bean>

	<bean id="clientHandler" class="org.chinux.pdc.nio.handlers.impl.ClientHandler"
		lazy-init="false">
		<constructor-arg>
			<ref bean="clientDataReceiver" />
		</constructor-arg>
		<property name="eventDispatcher" ref="eventDispatcher"></property>
		<property name="connectionCloseHandler" ref="clientDataReceiver"></property>
	</bean>

	

	<bean id="configServerHandler" class="org.chinux.pdc.nio.handlers.impl.ServerHandler"
		lazy-init="false">
		<property name="eventDispatcher" ref="workerEventDispatcher"></property>
	</bean>
	
	<bean id="monitorServerHandler" class="org.chinux.pdc.nio.handlers.impl.ServerHandler"
		lazy-init="false">
		<property name="eventDispatcher" ref="monitorworkerEventDispatcher"></property>
	</bean>

	<bean id="configServer" class="org.chinux.pdc.nio.services.NIOServer"
		lazy-init="false">
		<constructor-arg>
			<value type="java.lang.Integer">${configport}</value>
		</constructor-arg>
		<property name="handler" ref="configServerHandler"></property>
	</bean>
	
	<bean id="monitorServer" class="org.chinux.pdc.nio.services.NIOServer"
		lazy-init="false">
		<constructor-arg>
			<value type="java.lang.Integer">${monitorport}</value>
		</constructor-arg>
		<property name="handler" ref="monitorServerHandler"></property>
	</bean>


	<bean id="server" class="org.chinux.pdc.nio.services.NIOServer"
		lazy-init="false">
		<constructor-arg>
			<value type="java.lang.Integer">${proxyport}</value>
		</constructor-arg>
		<property name="handler" ref="serverHandler"></property>
	</bean>

	<bean id="client" class="org.chinux.pdc.nio.services.NIOClient"
		lazy-init="false">
		<constructor-arg>
			<value type="java.lang.Integer">80</value>
		</constructor-arg>
		<property name="handler" ref="clientHandler"></property>
	</bean>



	<bean id="serverService" class="org.chinux.pdc.Service" lazy-init="default">
		<constructor-arg>
			<ref bean="server" />
		</constructor-arg>
	</bean>
	
	<bean id="configServerService" class="org.chinux.pdc.Service" lazy-init="default">
		<constructor-arg>
			<ref bean="configServer" />
		</constructor-arg>
	</bean>
	
	<bean id="monitorServerService" class="org.chinux.pdc.Service" lazy-init="default">
		<constructor-arg>
			<ref bean="monitorServer" />
		</constructor-arg>
	</bean>
	

	<bean id="clientService" class="org.chinux.pdc.Service" lazy-init="default">
		<constructor-arg>
			<ref bean="client" />
		</constructor-arg>
	</bean>
</beans>
